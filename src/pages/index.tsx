import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";
import { AddGroupDialog } from "~/components/add-group-dialog";
import { Icons } from "~/components/icons";
import { Avatar, AvatarFallback, AvatarImage } from "~/components/ui/avatar";
import { Badge } from "~/components/ui/badge";
import { Button } from "~/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "~/components/ui/card";
import { Switch } from "~/components/ui/switch";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "~/components/ui/tooltip";
import { useGetGroups } from "~/lib/groups/get-groups";
import { toLocalizedTime } from "~/lib/localization/to-localized-time";

const Home: NextPage = () => {
  const [isLocationVoteFinished, setIsLocationVoteFinished] = useState(false);

  const { data: groups } = useGetGroups();

  return (
    <>
      <Head>
        <title>Lunch voting</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen w-full flex-col space-y-6">
        <h1 className="font-heading text-4xl md:text-4xl">Lunch Gruppen</h1>
        <h2 className="font-heading text-lg text-gray-500">
          Schlie√üe dich einer Gruppe an oder erstelle eine eigene
        </h2>

        {groups?.length !== 0 ? (
          <div className="flex w-full justify-between">
            <div className="flex items-center space-x-3">
              <Switch
                checked={isLocationVoteFinished}
                onCheckedChange={setIsLocationVoteFinished}
              />
              <span>Location steht fest</span>
            </div>
            <AddGroupDialog />
          </div>
        ) : null}

        {!!groups?.length ? (
          groups
            .filter((group) =>
              isLocationVoteFinished ? !!group.location : true
            )
            .map((group, index) => {
              const highestVote = group.poll.choices.sort(function (a, b) {
                return b.votes.length - a.votes.length;
              })[0];

              return (
                <Link key={index} href={`/groups/${group.id}`}>
                  <Card>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle>{group.name}</CardTitle>
                        <Button variant="default">Gruppe beitreten</Button>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="flex space-x-12">
                        <div className="min-w-[300px]">
                          <div className="flex h-12 items-center font-bold text-violet-400">
                            <Icons.building className="mr-2 h-4 w-4" />
                            <span>Location</span>
                          </div>
                          <div className="flex min-h-[44px] items-center text-lg">
                            <span>{group.location}</span>
                          </div>
                        </div>

                        <div className="min-w-[300px]">
                          <div className="flex h-12 items-center font-bold text-violet-400">
                            <Icons.mapPin className="mr-2 h-4 w-4" />
                            <span>Lunch Ort</span>
                          </div>
                          <div className="flex min-h-[44px] items-center text-lg">
                            {group.location ? (
                              <span>{highestVote?.name}</span>
                            ) : (
                              <div>
                                <Badge variant="secondary">
                                  Voting aktiv bis{" "}
                                  {toLocalizedTime(group.poll.finishedAt)} Uhr
                                </Badge>
                              </div>
                            )}
                          </div>
                        </div>

                        <div className="min-w-[200px]">
                          <div className="flex h-12 items-center font-bold text-violet-400">
                            <Icons.clock2 className="mr-2 h-4 w-4" />
                            <span>Zeit</span>
                          </div>
                          <div className="flex min-h-[44px] items-center text-lg">
                            {toLocalizedTime(group.startedAt)} -{" "}
                            {toLocalizedTime(group.finishedAt)} Uhr
                          </div>
                        </div>

                        <div>
                          <div className="flex h-12 items-center font-bold text-violet-400">
                            <Icons.users className="mr-2 h-4 w-4" />
                            <span>Teilnehmer</span>
                          </div>
                          <div className="flex">
                            {group.joinedUsers
                              .slice(0, 3)
                              .map((user, userIndex) => {
                                return (
                                  <div
                                    key={userIndex}
                                    className="-m-2 flex min-h-[44px] items-center text-lg"
                                  >
                                    <TooltipProvider>
                                      <Tooltip>
                                        <TooltipTrigger asChild>
                                          <Avatar className="border-2 border-white">
                                            <AvatarImage src={user.avatarUrl} />
                                            <AvatarFallback>
                                              {user.profileName.slice(0, 2)}
                                            </AvatarFallback>
                                          </Avatar>
                                        </TooltipTrigger>
                                        <TooltipContent>
                                          {user.profileName}
                                        </TooltipContent>
                                      </Tooltip>
                                    </TooltipProvider>
                                  </div>
                                );
                              })}
                            {group.joinedUsers.length > 3 ? (
                              <Avatar className="-m-2 border-2 border-white">
                                <AvatarFallback>
                                  {`+ ${group.joinedUsers.length - 3}`}
                                </AvatarFallback>
                              </Avatar>
                            ) : null}
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              );
            })
        ) : (
          <div className="flex h-[300px] w-full items-center justify-center space-x-6 bg-gray-50">
            <h2>Lege die erste Gruppe an</h2>
            <AddGroupDialog />
          </div>
        )}
      </main>
    </>
  );
};

export default Home;
